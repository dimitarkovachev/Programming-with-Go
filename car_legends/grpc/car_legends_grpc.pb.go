// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarLegendsClient is the client API for CarLegends service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarLegendsClient interface {
	AddCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Empty, error)
	GetCars(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CarList, error)
	AddCars(ctx context.Context, opts ...grpc.CallOption) (CarLegends_AddCarsClient, error)
}

type carLegendsClient struct {
	cc grpc.ClientConnInterface
}

func NewCarLegendsClient(cc grpc.ClientConnInterface) CarLegendsClient {
	return &carLegendsClient{cc}
}

func (c *carLegendsClient) AddCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CarLegends/AddCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carLegendsClient) GetCars(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CarList, error) {
	out := new(CarList)
	err := c.cc.Invoke(ctx, "/CarLegends/GetCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carLegendsClient) AddCars(ctx context.Context, opts ...grpc.CallOption) (CarLegends_AddCarsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CarLegends_ServiceDesc.Streams[0], "/CarLegends/AddCars", opts...)
	if err != nil {
		return nil, err
	}
	x := &carLegendsAddCarsClient{stream}
	return x, nil
}

type CarLegends_AddCarsClient interface {
	Send(*Car) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type carLegendsAddCarsClient struct {
	grpc.ClientStream
}

func (x *carLegendsAddCarsClient) Send(m *Car) error {
	return x.ClientStream.SendMsg(m)
}

func (x *carLegendsAddCarsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarLegendsServer is the server API for CarLegends service.
// All implementations must embed UnimplementedCarLegendsServer
// for forward compatibility
type CarLegendsServer interface {
	AddCar(context.Context, *Car) (*Empty, error)
	GetCars(context.Context, *Empty) (*CarList, error)
	AddCars(CarLegends_AddCarsServer) error
	mustEmbedUnimplementedCarLegendsServer()
}

// UnimplementedCarLegendsServer must be embedded to have forward compatible implementations.
type UnimplementedCarLegendsServer struct {
}

func (UnimplementedCarLegendsServer) AddCar(context.Context, *Car) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCar not implemented")
}
func (UnimplementedCarLegendsServer) GetCars(context.Context, *Empty) (*CarList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCars not implemented")
}
func (UnimplementedCarLegendsServer) AddCars(CarLegends_AddCarsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddCars not implemented")
}
func (UnimplementedCarLegendsServer) mustEmbedUnimplementedCarLegendsServer() {}

// UnsafeCarLegendsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarLegendsServer will
// result in compilation errors.
type UnsafeCarLegendsServer interface {
	mustEmbedUnimplementedCarLegendsServer()
}

func RegisterCarLegendsServer(s grpc.ServiceRegistrar, srv CarLegendsServer) {
	s.RegisterService(&CarLegends_ServiceDesc, srv)
}

func _CarLegends_AddCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarLegendsServer).AddCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarLegends/AddCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarLegendsServer).AddCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarLegends_GetCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarLegendsServer).GetCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CarLegends/GetCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarLegendsServer).GetCars(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarLegends_AddCars_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CarLegendsServer).AddCars(&carLegendsAddCarsServer{stream})
}

type CarLegends_AddCarsServer interface {
	SendAndClose(*Empty) error
	Recv() (*Car, error)
	grpc.ServerStream
}

type carLegendsAddCarsServer struct {
	grpc.ServerStream
}

func (x *carLegendsAddCarsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *carLegendsAddCarsServer) Recv() (*Car, error) {
	m := new(Car)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarLegends_ServiceDesc is the grpc.ServiceDesc for CarLegends service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarLegends_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CarLegends",
	HandlerType: (*CarLegendsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCar",
			Handler:    _CarLegends_AddCar_Handler,
		},
		{
			MethodName: "GetCars",
			Handler:    _CarLegends_GetCars_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddCars",
			Handler:       _CarLegends_AddCars_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "car_legends.proto",
}
